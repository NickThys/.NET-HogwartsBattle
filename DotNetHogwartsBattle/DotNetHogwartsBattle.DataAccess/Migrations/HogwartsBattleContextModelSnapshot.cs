// <auto-generated />
using System;
using DotNetHogwartsBattle.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetHogwartsBattle.DataAccess.Migrations
{
    [DbContext(typeof(HogwartsBattleContext))]
    partial class HogwartsBattleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DotNetHogwartsBattle.Common.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardKind")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameIdentifier")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Card");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasToChooseBetween")
                        .HasColumnType("bit");

                    b.Property<int?>("StartHeroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StartHeroId");

                    b.ToTable("Ability");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ability");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("NrOfActions")
                        .HasColumnType("int");

                    b.Property<int?>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("RewardId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Common.GameDiscardable>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("BackImg")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Deck<GameDiscardable>");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Location>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("BackImg")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Deck<Location>");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.StartHero>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("BackImg")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Deck<StartHero>");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Villain>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("BackImg")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Deck<Villain>");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentGameIdentifier")
                        .HasColumnType("int");

                    b.Property<int>("DiscardDeckId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationDeckId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NrOfVillainsActive")
                        .HasColumnType("int");

                    b.Property<int>("VillainsDeckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscardDeckId");

                    b.HasIndex("LocationDeckId");

                    b.HasIndex("LocationId");

                    b.HasIndex("VillainsDeckId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.PlayerBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiscardDeckId")
                        .HasColumnType("int");

                    b.Property<int>("DrawDeckId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivePlayer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NrOfAttacks")
                        .HasColumnType("int");

                    b.Property<int>("NrOfInfluenceTokens")
                        .HasColumnType("int");

                    b.Property<int>("PlayerOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscardDeckId");

                    b.HasIndex("DrawDeckId");

                    b.HasIndex("GameId");

                    b.ToTable("PlayerBoards");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Reward");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Trigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("When")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trigger");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.TriggerEvent", b =>
                {
                    b.Property<int>("TriggerId")
                        .HasColumnType("int");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.HasKey("TriggerId", "Event");

                    b.ToTable("TriggerEvent");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.TriggerTriggeredBy", b =>
                {
                    b.Property<int>("TriggerId")
                        .HasColumnType("int");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.HasKey("TriggerId", "CardType");

                    b.ToTable("TriggerTriggeredBy");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Common.GameDiscardable", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Common.Card");

                    b.Property<int?>("Deck<GameDiscardable>Id")
                        .HasColumnType("int");

                    b.HasIndex("Deck<GameDiscardable>Id");

                    b.HasDiscriminator().HasValue("GameDiscardable");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.AbilityWithTrigger", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Domain.Ability");

                    b.Property<int>("TriggerId")
                        .HasColumnType("int");

                    b.HasIndex("TriggerId");

                    b.HasDiscriminator().HasValue("AbilityWithTrigger");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.DarkArts", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Common.Card");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.HasIndex("AbilityId");

                    b.HasDiscriminator().HasValue("DarkArts");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Hero", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Common.Card");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int")
                        .HasColumnName("Hero_AbilityId");

                    b.HasIndex("AbilityId");

                    b.HasDiscriminator().HasValue("Hero");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.StartHero", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Common.Card");

                    b.Property<int?>("Deck<StartHero>Id")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerBoardId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("Deck<StartHero>Id");

                    b.HasIndex("PlayerBoardId");

                    b.HasDiscriminator().HasValue("StartHero");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Hogwarts", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Domain.Cards.StartHero");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Hogwarts");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Location", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Common.GameDiscardable");

                    b.Property<int?>("Deck<Location>Id")
                        .HasColumnType("int");

                    b.Property<int>("LocationNr")
                        .HasColumnType("int");

                    b.Property<int>("NrOfDarkArtsReveals")
                        .HasColumnType("int");

                    b.Property<int>("NrOfDarkMarkTokens")
                        .HasColumnType("int");

                    b.Property<int>("NrOfDarkMarkTokensNeeded")
                        .HasColumnType("int");

                    b.Property<int>("NrOfLocations")
                        .HasColumnType("int");

                    b.HasIndex("Deck<Location>Id");

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Villain", b =>
                {
                    b.HasBaseType("DotNetHogwartsBattle.Common.GameDiscardable");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int")
                        .HasColumnName("Villain_AbilityId");

                    b.Property<int?>("Deck<Villain>Id")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.HasIndex("AbilityId");

                    b.HasIndex("Deck<Villain>Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RewardId");

                    b.HasDiscriminator().HasValue("Villain");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Ability", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Cards.StartHero", null)
                        .WithMany("CardEffect")
                        .HasForeignKey("StartHeroId");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Action", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Ability", null)
                        .WithMany("Actions")
                        .HasForeignKey("AbilityId");

                    b.HasOne("DotNetHogwartsBattle.Domain.Reward", null)
                        .WithMany("Actions")
                        .HasForeignKey("RewardId");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Game", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Common.GameDiscardable>", "DiscardDeck")
                        .WithMany()
                        .HasForeignKey("DiscardDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Location>", "LocationDeck")
                        .WithMany()
                        .HasForeignKey("LocationDeckId");

                    b.HasOne("DotNetHogwartsBattle.Domain.Cards.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Villain>", "VillainsDeck")
                        .WithMany()
                        .HasForeignKey("VillainsDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscardDeck");

                    b.Navigation("Location");

                    b.Navigation("LocationDeck");

                    b.Navigation("VillainsDeck");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.PlayerBoard", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.StartHero>", "DiscardDeck")
                        .WithMany()
                        .HasForeignKey("DiscardDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.StartHero>", "DrawDeck")
                        .WithMany()
                        .HasForeignKey("DrawDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetHogwartsBattle.Domain.Game", "Game")
                        .WithMany("PlayerBoards")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscardDeck");

                    b.Navigation("DrawDeck");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.TriggerEvent", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Trigger", "Trigger")
                        .WithMany("Events")
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.TriggerTriggeredBy", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Trigger", "Trigger")
                        .WithMany("TriggertBy")
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Common.GameDiscardable", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Common.GameDiscardable>", null)
                        .WithMany("Cards")
                        .HasForeignKey("Deck<GameDiscardable>Id");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.AbilityWithTrigger", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Trigger", "Trigger")
                        .WithMany()
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.DarkArts", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Hero", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.AbilityWithTrigger", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.StartHero", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.StartHero>", null)
                        .WithMany("Cards")
                        .HasForeignKey("Deck<StartHero>Id");

                    b.HasOne("DotNetHogwartsBattle.Domain.PlayerBoard", null)
                        .WithMany("PlayableCards")
                        .HasForeignKey("PlayerBoardId");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Location", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Location>", null)
                        .WithMany("Cards")
                        .HasForeignKey("Deck<Location>Id");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.Villain", b =>
                {
                    b.HasOne("DotNetHogwartsBattle.Domain.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Villain>", null)
                        .WithMany("Cards")
                        .HasForeignKey("Deck<Villain>Id");

                    b.HasOne("DotNetHogwartsBattle.Domain.Game", null)
                        .WithMany("Villains")
                        .HasForeignKey("GameId");

                    b.HasOne("DotNetHogwartsBattle.Domain.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Ability", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Common.GameDiscardable>", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Location>", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.StartHero>", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Deck<DotNetHogwartsBattle.Domain.Cards.Villain>", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Game", b =>
                {
                    b.Navigation("PlayerBoards");

                    b.Navigation("Villains");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.PlayerBoard", b =>
                {
                    b.Navigation("PlayableCards");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Reward", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Trigger", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("TriggertBy");
                });

            modelBuilder.Entity("DotNetHogwartsBattle.Domain.Cards.StartHero", b =>
                {
                    b.Navigation("CardEffect");
                });
#pragma warning restore 612, 618
        }
    }
}
